import urllib.request
from bs4 import BeautifulSoup
import sys
import math
import json
from datetime import datetime

now1 = datetime.now()
black_list = [114328, 108312, 141249, 114453, 111571, 113171, 113693, 140162, 71767, 144372, 159674]
song_id =  [37, 49, 52, 3, 5, 44, 53, 6, 8, 17, 46, 22, 47, 43, 23, 38, 48, 25, 1, 42, 26, 32, 35, 16, 29, 15, 21, 4, 45, 39, 14, 40, 19, 10, 31, 50, 11, 2, 34, 41, 7, 33, 51, 18, 27, 24, 9, 30, 12, 36, 13, 20, 28, #1
            56, 93, 76, 78, 83, 91, 92, 79, 87, 72, 104, 68, 70, 98, 58, 100, 82, 85, 107, 59, 54, 71, 105, 64, 80, 73, 67, 95, 75, 62, 69, 108, 63, 99, 103, 94, 74, 102, 55, 97, 88, 65, 66, 81, 86, 96, 57, 61, 109, 60, 106, 101, 84, 90, 89, 77, #2
            125, 146, 132, 126, 127, 160, 135, 114, 131, 147, 161, 118, 116, 133, 149, 140, 157, 150, 154, 158, 115, 113, 136, 144, 112, 145, 153, 124, 139, 148, 155, 122, 159, 143, 119, 134, 162, 123, 130, 152, 129, 121, 111, 141, 120, 138, 117, 156, 110, 137, 128, 142, 151, #3
            207, 197, 189, 163, 171, 195, 209, 206, 204, 200, 180, 208, 202, 168, 166, 210, 201, 177, 205, 167, 196, 193, 165, 179, 172, 187, 182, 198, 188, 211, 192, 164, 174, 170, 183, 194, 184, 185, 169, 191, 213, 190, 212, 173, 199, 214, 176, 186, 203, 178, 175, 181, #4
            246, 248, 217, 232, 223, 270, 257, 268, 233, 273, 236, 219, 247, 227, 221, 235, 238, 255, 261, 240, 228, 215, 262, 222, 244, 252, 266, 224, 220, 241, 239, 256, 265, 269, 267, 245, 259, 253, 249, 263, 264, 254, 226, 272, 216, 230, 242, 271, 260, 231, 250, 229, 237, 251, 218, 225, 258, 234, 243, #5
            304, 312, 277, 314, 319, 302, 289, 294, 298, 274, 275, 301, 318, 281, 286, 295, 303, 306, 311, 313, 316, 293, 287, 297, 305, 280, 300, 310, 282, 279, 296, 315, 284, 278, 299, 290, 283, 288, 291, 276, 317, 292, 308, 285, 309, 307, #6
            355, 377, 364, 365, 324, 363, 379, 378, 371, 343, 330, 360, 354, 356, 339, 321, 326, 341, 350, 351, 369, 370, 375, 362, 334, 344, 357, 345, 366, 367, 342, 359, 340, 320, 323, 328, 333, 329, 335, 332, 353, 336, 361, 347, 338, 352, 327, 349, 372, 346, 373, 358, 374, 368, 348, 337, 325, 376, 331, 322, #7
            426, 424, 422, 389, 391, 423, 397, 417, 416, 381, 414, 409, 406, 380, 392, 394, 396, 401, 402, 410, 411, 425, 382, 387, 385, 398, 405, 415, 400, 407, 403, 384, 393, 420, 395, 399, 383, 388, 421, 390, 418, 419, 412, 404, 408, 386, 413, #8
            464, 450, 452, 428, 457, 469, 440, 444, 468, 454, 446, 463, 427, 435, 472, 429, 462, 431, 441, 432, 443, 434, 453, 460, 467, 433, 448, 471, 465, 455, 461, 447, 470, 456, 445, 438, 459, 449, 466, 451, 442, 458, 430, 436, 439, 437, #9
            474, 480, 525, 484, 486, 481, 517, 506, 475, 473, 483, 489, 482, 488, 499, 501, 502, 524, 529, 531, 528, 512, 530, 477, 523, 510, 487, 494, 516, 509, 505, 504, 492, 491, 495, 476, 503, 498, 534, 536, 497, 500, 485, 479, 533, 518, 519, 526, 521, 496, 522, 520, 535, 532, 507, 527, 508, 514, 493, 511, 490, 515, 478, 513, #10
            552, 577, 570, 567, 540, 558, 561, 539, 541, 581, 573, 572, 565, 537, 543, 578, 547, 562, 538, 571, 576, 559, 548, 580, 579, 554, 556, 542, 545, 544, 557, 563, 555, 569, 549, 564, 574, 550, 560, 575, 553, 551, 566, 568, 546, #11
            600, 624, 582, 638, 606, 623, 639, 588, 615, 608, 583, 596, 601, 599, 631, 635, 636, 603, 587, 593, 610, 633, 626, 627, 637, 595, 630, 625, 611, 616, 594, 613, 628, 621, 618, 629, 614, 607, 602, 620, 605, 634, 604, 590, 597, 591, 632, 586, 584, 622, 592, 617, 589, 612, 598, 609, 619, 585, #12
            665, 655, 642, 681, 680, 663, 684, 654, 676, 685, 640, 644, 673, 658, 664, 662, 656, 650, 668, 645, 653, 659, 660, 657, 670, 675, 682, 667, 683, 679, 648, 647, 646, 649, 661, 643, 672, 669, 651, 678, 641, 652, 677, 674, 666, 671, #13
            710, 722, 695, 699, 702, 686, 705, 693, 725, 716, 697, 714, 719, 707, 715, 692, 689, 691, 708, 720, 724, 698, 694, 690, 717, 709, 723, 688, 728, 696, 704, 687, 718, 721, 713, 700, 703, 712, 701, 711, 727, 706, 726, #14
            746, 742, 729, 744, 741, 762, 745, 758, 747, 755, 743, 754, 732, 763, 737, 751, 731, 759, 739, 757, 748, 738, 753, 761, 752, 730, 756, 750, 736, 734, 735, 733, 749, 740, 760, #15
            765, 776, 772, 778, 764, 793, 770, 781, 768, 784, 794, 785, 787, 790, 783, 789, 771, 777, 774, 775, 788, 767, 779, 792, 786, 769, 766, 791, 780, 782, 773, #16
            806, 812, 802, 816, 823, 799, 800, 805, 796, 817, 795, 818, 814, 804, 824, 797, 798, 810, 819, 822, 815, 821, 801, 813, 811, 807, 808, 803, 820, 809, #17
            838, 843, 852, 840, 853, 827, 841, 833, 851, 846, 839, 836, 828, 831, 849, 830, 848, 825, 850, 845, 835, 847, 837, 844, 842, 826, 832, 834, 829, #18
            888, 878, 870, 854, 881, 860, 874, 864, 880, 885, 882, 875, 877, 872, 879, 889, 857, 859, 861, 858, 855, 876, 873, 886, 887, 867, 883, 863, 866, 865, 862, 856, 884, 869, 871, 868, #19
            904, 891, 916, 912, 895, 907, 914, 910, 908, 902, 909, 913, 903, 915, 900, 923, 892, 897, 898, 890, 920, 917, 924, 905, 899, 911, 926, 906, 919, 918, 901, 921, 925, 893, 896, 894, 922, #20
            943, 955, 949, 956, 940, 945, 952, 939, 954, 933, 929, 951, 927, 938, 935, 936, 941, 962, 959, 946, 950, 944, 957, 931, 961, 932, 937, 958, 928, 947, 930, 963, 934, 948, 953, 942, 960, #21
            984, 970, 976, 981, 978, 964, 986, 977, 975, 967, 980, 985, 987, 989, 971, 982, 973, 974, 988, 965, 966, 983, 979, 968, 972, 969, #22
            1010, 1015, 998, 1000, 999, 1011, 1014, 1003, 990, 1004, 995, 991, 993, 1001, 1017, 1013, 1016, 1002, 994, 1006, 997, 1012, 1009, 992, 1008, 1007, 1005, 996, #23
            1023, 1018, 1021, 1019, 1022, 1024, 1020, 1025, 1028, 1027, 1026, #24
            1029, 1030, #25
            1032, 1034, 1035, 1031, 1033]

print(len(set(song_id)))

def PGF(x,m):
    try:
        return 1+(x-0.5)/(1-x)
    except:
        return m

def BPI_calc(s,k,z,m,p):
    S=PGF(s/m,m)
    K=PGF(k/m,m)
    Z=PGF(z/m,m)
    S_dash=S/K
    Z_dash=Z/K
    if(s>=k):
        return 100*(pow(math.log(S_dash),p))/(pow(math.log(Z_dash),p))
    else:
        return -100*(pow(-math.log(S_dash),p))/(pow(math.log(Z_dash),p))
diff = [i for i in range(1, 26)]
border = [71 - (i*1.5) for i in range(25)]
border.append(40)
diff.append(99)
songs = {}
un = 0
BPI_per = [0.0003791, 0.0008341, 0.0018335, 0.00403067, 0.00886266, 0.01948992, 0.04286059, 0.09425297, 0.2072687]
tag_URL1 = "http://www.dream-pro.info/~lavalse/LR2IR/"
so = 0

for dif in diff:#TAG:★1~25, 99
    song_list = []
    print ("\n LEVEL "+str(dif)+"\n")
    tag_URL="http://www.dream-pro.info/~lavalse/LR2IR/search.cgi?mode=search&type=insane&exlevel=" + str(dif) + "&7keys=1&sort=bmsid_asc"
    tag_html = urllib.request.urlopen(tag_URL).read().decode('shift_JIS', 'ignore')
    tag_soup = BeautifulSoup(tag_html, "html.parser")
    href = [a.get("href") for a in tag_soup.find_all("a")][50:-1]
    song_table=str(tag_soup.findAll("table")[0]).split("\n")
    n = len(song_table) // 10
    for s in range(n):#song_name_get
        song_list.append(song_table[10 * s + 5].split('>')[2].split('<')[0])
    for w in range(len(href)):#曲の数だけ
        max_record = 2
        page = 1
        BPI_rank = []#理想BPIを格納
        ranking_data = [] #スコア
        IR_URLs=href[w].split("&")
        Rank=1
        print(song_list[w])
        while True:#page1~n
            IR_URL=tag_URL1+IR_URLs[0]+"&page="+str(page)+"&"+IR_URLs[1]
            IR_html=urllib.request.urlopen(IR_URL).read().decode('shift_JIS', 'ignore')
            IR_soup = BeautifulSoup(IR_html, "html.parser")
            try:
                IR_list=str(IR_soup.findAll("table")[3]).split("\n")[2:-1][0::2]
                if(max_record):
                    max_score = int(IR_list[0].split('>')[14].split('/')[1].split('(')[0])
                    max_record -= 1
            except:
                break
            for IR_player in IR_list:
                IR = IR_player.split('>')
                player_ID = int(IR[4].split("=")[3].strip('"'))
                if(player_ID in black_list):
                    continue
                else:
                    player_score = int(IR[14].split('/')[0])
                    score_rate = float(IR[14].split('/')[1].split('(')[1].split('%')[0])
                    if(score_rate >= border[un]):
                        ranking_data.append(player_score)
                    elif(len(ranking_data) == 0):
                        continue
                    else:
                        break
            page += 1
        while ranking_data[0] > max_score:
            ranking_data.pop(0)
        zenichi = ranking_data[0]
        average = sum(ranking_data) / len(ranking_data)
        players = len(ranking_data)
        print("理論値:" + str(max_score))
        print("全1:" + str(zenichi))
        print("平均:" + str(average))
        for bpn in BPI_per:
            rank_append = math.ceil(bpn * players)
            if(rank_append == 1):
                rank_append += 1
            if(rank_append in BPI_rank):
                rank_append = max(BPI_rank) + 1
            BPI_rank.append(rank_append)
        BPI_score = []
        for bp in BPI_rank:
            BPI_score.append(ranking_data[bp + 1])
        BPI_otehon = [90, 80, 70, 60, 50, 40, 30, 20, 10]
        great_p = 1.8
        min_bunsan = 1e9
        for kouho_p in range(1, 2501):
            BPI_zissai = []
            kouho_p /= 1000
            for bs in BPI_score:
                if(bs <= max_score):
                    BPI_zissai.append(BPI_calc(bs,average,zenichi,max_score,kouho_p))
                else:
                    BPI_zissai.append(90)
            bunsan = 0
            for j in range(len(BPI_score)):
                bunsan += (BPI_otehon[j] - BPI_zissai[j])**2
            if(min_bunsan > bunsan):
                great_p = kouho_p
                min_bunsan = bunsan
        print("理想のp値:" + str(great_p))
        BPI_kekka = []
        for bs in BPI_score:
            BPI_kekka.append(BPI_calc(bs,average,zenichi,max_score,great_p))
        nnn = len(ranking_data)
        songs[song_id[so]] = {"grade":dif, "max_score":max_score, "zenichi":zenichi, "average":average, "p":great_p, "players":nnn}
        print(song_id[so])
        print(songs[song_id[so]])
        so += 1
    un += 1
    

with open("score_data/songs_insane.json", 'w') as f:
    json.dump(songs, f, ensure_ascii=False, indent=4)
now2 = datetime.now()
total_time = now2 - now1
print("実行時間:" + str(total_time))
